---
#
# defaults file for ansible_role_microk8s
#

# version management
microk8s_version: "1.29/stable"
microk8s_disable_snap_autoupdate: false

# plugin configuration
microk8s_dns_resolvers: 8.8.8.8,8.8.4.4
registry_size: 20Gi
microk8s_plugins:
  #dns: "{{ microk8s_dns_resolvers }}" # CoreDNS
  host-access: true # Allow Pods connecting to Host services smoothly
  ingress: false # Ingress controller for external access
  metrics-server: false # K8s Metrics Server for API access to service metrics
  rbac: true # Role-Based Access Control for authorisation
  hostpath-storage: true # Storage class; allocates storage from host directory
  registry: "size={{ registry_size }}" # Private image registry exposed on localhost:32000
  dashboard: true # The Kubernetes dashboard
  ambassador: false # Ambassador API Gateway and Ingress
  cilium: false # SDN, fast with full network policy
  fluentd: false # Elasticsearch-Fluentd-Kibana logging and monitoring
  gpu: false # Automatic enablement of Nvidia CUDA
  helm: false # Helm 2 - the package manager for Kubernetes
  helm3: true # Helm 3 - Kubernetes package manager
  istio: false # Core Istio service mesh services
  jaeger: false # Kubernetes Jaeger operator with its simple config
  knative: false # The Knative framework on Kubernetes.
  kubeflow: false # Kubeflow for easy ML deployments
  linkerd: false # Linkerd is a service mesh for Kubernetes and other frameworks
  metallb: false # Loadbalancer for your Kubernetes cluster
  multus: false # Multus CNI enables attaching multiple network interfaces to pods
  prometheus: false # Prometheus operator for monitoring and logging
  traefik: false # another ingress
  portainer: false # Container management dashboard
  keda: false # Kubernetes Event-driven Autoscaling operator.
  kata: false # A secure container runtime with lightweight virtual machines
  openebs: false # openebs storage
  openfaas: false # serverless

helm3_repositories:
  - name: stable
    url: https://charts.helm.sh/stable

# users to make members of microk8s group
users: ["root"]

# enable high-availability?
microk8s_enable_HA: false

# hostgroup whose members will form high-availability cluster
microk8s_group_HA: "microk8s_HA"

# regex to select IP address for joining nodes in HA setup
microk8s_ip_regex_HA: "([0-9]{1,3}[\\.]){3}[0-9]{1,3}"

# hostgroup whose members will act as worker nodes only (no control-plane components run here)
microk8s_group_WORKERS: "microk8s_WORKERS"

# option to add workers hostgroup memembers to hostfile
add_workers_to_hostfile: false
# for setting up custom certificate request.  Set to template name to enable
microk8s_csr_template: csr.conf.template.j2
kubeconfig_local_location: "/tmp"
kubeapi_loadbalancer_fqdn: nlb.lb.com
enable_registry_mirror: false
registry_mirror_fqdn: example.com
registry_mirror_port: 9000
teardown: false
microk8s_root_path: /var/snap/microk8s/
longhorn_data_path: /var/lib/longhorn/
rook_data_path: /var/lib/rook
microk8s_apiserver_port: 16443
microk8s_dev_skip: false
dev_skip: false
base_domain: "dev.example.com"
kubernetes_oidc_enabled: false
kubernetes_oidc_issuer: https://issurerurl
kubernetes_oidc_client_id: "acsdfasdfasdf"
kubernetes_oidc_groups_claim: "techops-admin, techops-user"
kubernetes_oidc_groups_prefix: "oidc:"
kubernetes_oidc_username_prefix: "oidc:"
kubernetes_oidc_username_claim: "username"
docker_registry_mirrors: ["docker.io", "ghcr.io", "quay.io", "k8s.gcr.io"]
dns_bind_address: "169.254.20.10"
