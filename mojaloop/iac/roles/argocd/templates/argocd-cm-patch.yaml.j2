apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-cm
data:
  url: https://argocd.{{ argocd_domain }}
  oidc.config: |
    name: Zitadel
    issuer: {{ zitadel_server_url }}
    clientID: $argo-oidc:clientid
    clientSecret: $argo-oidc:clientsecret
    requestedScopes: ["openid", "profile", "email", "read_api"]
  application.instanceLabelKey: argocd.argoproj.io/instance
  kustomize.buildOptions: --enable-helm
  statusbadge.enabled: 'true'
  ui.bannercontent: "argocd application install"
  ui.bannerpermanent: "true"
  resource.customizations: |
    argoproj.io/Application:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    cert-manager.io/Certificate:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
    redhatcop.redhat.io/VaultSecret:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "ReconcileSuccessful" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "ReconcileSuccessful" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for VaultSecret"
        return hs

    batch/Job:
      health.lua.useOpenLibs: true
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Failed" and condition.status == "True" then
                hs.status = "Degraded"
                if string.sub(obj.metadata.name,1,16) == "moja-ml-ttk-test" then
                  hs.status = "Healthy"
                end
                hs.message = condition.message
                return hs
              end
              if condition.type == "Complete" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Suspended" then
                hs.status = "Suspended"
                hs.message = condition.message
                return hs
              end
            end
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for Job"
        return hs

    k8s.keycloak.org/Keycloak:
      health.lua: |    
        if obj.status == nil or obj.status.conditions == nil then
          -- no status info available yet
          return {
            status = "Progressing",
            message = "Waiting for Keycloak status conditions to exist",
          }
        end

        -- Sort conditions by lastTransitionTime, from old to new.
        table.sort(obj.status.conditions, function(a, b)
          return a.lastTransitionTime < b.lastTransitionTime
        end)

        for _, condition in ipairs(obj.status.conditions) do
          if condition.type == "Ready" and condition.status == "True" then
            return {
              status = "Healthy",
              message = "",
            }
          elseif condition.type == "HasErrors" and condition.status == "True" then
            return {
              status = "Degraded",
              message = "Has Errors: " .. condition.message,
            }
          end
        end

        -- We couldn't find matching conditions yet, so assume progressing
        return {
          status = "Progressing",
          message = "",
        }
          
    pxc.percona.com/PerconaXtraDBCluster:
      health.lua: |      
        local hs = {}
        if obj.status ~= nil then

          if obj.status.state == "initializing" then
            hs.status = "Progressing"
            hs.message = obj.status.ready .. "/" .. obj.status.size .. " node(s) are ready"
            return hs
          end

          if obj.status.state == "ready" then
            hs.status = "Healthy"
            hs.message = obj.status.ready .. "/" .. obj.status.size .. " node(s) are ready"
            return hs
          end

          if obj.status.state == "paused" then
            hs.status = "Unknown"
            hs.message = "Cluster is paused"
            return hs
          end

          if obj.status.state == "stopping" then
            hs.status = "Degraded"
            hs.message = "Cluster is stopping (" .. obj.status.ready .. "/" .. obj.status.size .. " node(s) are ready)"
            return hs
          end

          if obj.status.state == "error" then
            hs.status = "Degraded"
            hs.message = "Cluster is on error: " .. table.concat(obj.status.message, ", ")
            return hs
          end

        end

        hs.status = "Unknown"
        hs.message = "Cluster status is unknown. Ensure your ArgoCD is current and then check for/file a bug report: https://github.com/argoproj/argo-cd/issues"
        return hs