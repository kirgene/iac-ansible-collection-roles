- name: install kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    mode: 0700

- name: download argocd cli
  get_url:
    url: https://github.com/argoproj/argo-cd/releases/download/v{{ argocd_cli_version }}/argocd-linux-amd64
    dest: /usr/local/bin/argocd
    mode: 0700

- name: download clusterctl
  get_url:
    url: https://github.com/kubernetes-sigs/cluster-api/releases/download/v{{ clusterctl_version }}/clusterctl-linux-amd64
    dest: /usr/local/bin/clusterctl
    mode: 0700

- name: setup netbird install
  shell: |
    curl -sSL https://pkgs.netbird.io/debian/public.key | sudo gpg --dearmor --output /usr/share/keyrings/netbird-archive-keyring.gpg
    echo 'deb [signed-by=/usr/share/keyrings/netbird-archive-keyring.gpg] https://pkgs.netbird.io/debian stable main' | sudo tee /etc/apt/sources.list.d/netbird.list

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Netbird CLI
  package:
    name:
      - netbird={{ fact_netbird_version }}

- name: Create temporary directory for cc boot
  tempfile:
    state: directory
    suffix: values
  register: cctmpvalues

- name: "create directory for kubeconfig"
  file:
    path: "{{ kubeconfig_location }}"
    state: directory
    recurse: yes

- name: copy kubeconfig
  copy:
    src: "{{ kubeconfig_local_location }}/kubeconfig"
    dest: "{{ kubeconfig_location }}/kubeconfig"
    mode: "0600"

- name: apply node labels
  shell: |
    kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig label --overwrite nodes {{ item.node_name }} {% for labels in lookup('dict', item.node_labels, wantlist=True) %} {{ labels.key }}={{ labels.value }}{% endfor %}
  loop: "{{ node_pool_labels }}"
  when: node_pool_labels is defined

- name: apply node taints
  shell: |
    kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig taint --overwrite nodes {{ item.node_name }} {% for taints in lookup('dict', item.node_taints, wantlist=True) %} {{ taints.value }}{% endfor %}
  loop: "{{ node_pool_taints }}"
  when: node_pool_taints is defined

- name: Upload cc template dirs
  file:
    path: "{{ cctmpvalues.path }}/{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
  with_filetree: "{{role_path}}/templates/"
  when: item.state == 'directory'

- name: Upload cc template files
  template:
    src: "{{ item.src }}"
    dest: "{{ cctmpvalues.path }}/argocd/{{ item.path | regex_replace('\\.j2$', '') }}"
  with_filetree: "{{role_path}}/templates/argocd"
  when: item.state == 'file'

- name: Upload capi template files
  template:
    src: "{{ item.src }}"
    dest: "{{ cctmpvalues.path }}/capi/{{ item.path | regex_replace('\\.j2$', '') }}"
  with_filetree: "{{role_path}}/templates/capi"
  when: item.state == 'file'

- name: Upload coredns-localcache template files
  template:
    src: "coredns-nodecache.yaml.j2"
    dest: "{{ cctmpvalues.path }}/coredns-nodecache.yaml"
