
# - name: Disable argocd apps automated sync
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl patch application -n {{ fact_argo_merged_config.namespace }} root-deployer --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
#     for app in dns-utils capi-post-config capi vault vault-post-config gitlab-pre netbird-pre zitadel-pre gitlab gitlab-post-config nexus \
#     monitoring-pre monitoring monitoring-post-config netbird-operator storage-post-config storage; do
#       kubectl patch application -n {{ fact_argo_merged_config.namespace }} $app --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
#     done
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove gitlab post-config resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete rdscluster -n gitlab --ignore-not-found=true --all
#     kubectl delete -n argocd application gitlab-post-config --ignore-not-found  2>&1 &
#     for resource in \
#       "xgitlabpostconfig" \
#       "gitlabpostconfig" \
#       "XProject" \
#       "AccessToken" \
#       "workspaces.tf.upbound.io" \
#       "providerconfigs.gitlab.crossplane.io"; do
#       kubectl get "$resource" -n gitlab -o json 2>/dev/null | jq -r '.items[].metadata.name' | \
#       xargs -I{} kubectl patch "$resource" {} -n gitlab --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#     done
#     sleep 60
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove gitlab and pre resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete -n argocd application gitlab --ignore-not-found
#     kubectl delete -n argocd application gitlab-pre --ignore-not-found 2>&1 &
#     kubectl get workspaces.tf.upbound.io -n gitlab -o json 2>/dev/null | jq -r '.items[].metadata.name' | xargs -r -I{} kubectl patch workspaces.tf.upbound.io {} -n gitlab --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove monitoring resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete -n argocd application monitoring-post-config --ignore-not-found
#     kubectl delete -n argocd application monitoring --ignore-not-found
#     kubectl delete -n argocd application monitoring-pre --ignore-not-found
#     for pvc in $(kubectl get pvc -n monitoring -o name 2>/dev/null); do
#     echo "ðŸ”§ Patching and deleting $pvc..."
#     kubectl patch "$pvc" -n monitoring --type=merge -p '{"metadata":{"finalizers":null}}' || true
#     kubectl delete "$pvc" -n monitoring --ignore-not-found || true
#     done
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove nexus resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete -n argocd application nexus-post-config --ignore-not-found
#     kubectl delete -n argocd application nexus --ignore-not-found
#     kubectl delete -n argocd application nexus-pre --ignore-not-found
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove netbird operator resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete -n argocd application netbird-operator --ignore-not-found > /dev/null 2>&1 &
#     for resource in \
#       "XNBOperatorBootstrap" \
#       "XOperatorPostConfig" \
#       "netbirdpostconfig" \
#       "xnetbirdpostconfig" \
#       "providerconfigs.netbird.crossplane.io"; do
#       kubectl get "$resource" -n netbird -o json 2>/dev/null | jq -r '.items[].metadata.name' | \
#        xargs -r -I{} kubectl patch "$resource" {} -n netbird --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#     done
#     sleep 30

# - name: Remove netbird resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete rdscluster -n netbird --ignore-not-found=true --all
#     kubectl delete -n argocd application netbird-post-config --ignore-not-found > /dev/null 2>&1 &
#     for resource in \
#       "XNBOperatorBootstrap" \
#       "XOperatorPostConfig" \
#       "netbirdpostconfig" \
#       "xnetbirdpostconfig" \
#       "providerconfigs.netbird.crossplane.io"; do
#       kubectl get "$resource" -n netbird -o json 2>/dev/null | jq -r '.items[].metadata.name' | \
#        xargs -r -I{} kubectl patch "$resource" {} -n netbird --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#     done
#     sleep 30
#     kubectl delete -n argocd application netbird-post-config --ignore-not-found
#     kubectl delete -n argocd application netbird --ignore-not-found
#     kubectl get workspaces.tf.upbound.io -n netbird -o json 2>/dev/null | jq -r '.items[].metadata.name' | \
#     xargs -r -I{} kubectl patch workspaces.tf.upbound.io {} -n netbird --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#     kubectl delete -n argocd application netbird-pre --ignore-not-found
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove dns resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete awsroute53record -n ext-dns ceph-objectstore-rgw --ignore-not-found=true
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove zitadel resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete rdscluster -n zitadel --ignore-not-found=true --all
#     kubectl get workspaces.tf.upbound.io -n zitadel -o json 2>/dev/null | jq -r '.items[].metadata.name' | \
#     xargs -r -I{} kubectl patch workspaces.tf.upbound.io {} -n zitadel --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#     kubectl delete -n argocd application zitadel-post-config --ignore-not-found
#     kubectl delete -n argocd application zitadel --ignore-not-found
#     kubectl delete -n argocd application zitadel-pre --ignore-not-found
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove vault resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete -n argocd application vault-post-config --ignore-not-found
#     kubectl delete -n argocd application vault --ignore-not-found 2>&1 &
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Remove storage resources
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete -n argocd application storage-post-config --ignore-not-found 2>&1 &
#     kubectl get XObjectSyncer -n {{ fact_storage_namespace }} -o json 2>/dev/null | jq -r '.items[].metadata.name' | \
#     xargs -r -I{} kubectl patch XObjectSyncer {} -n {{ fact_storage_namespace }} --type=merge -p '{"metadata":{"finalizers":[]}}' || true
#     sleep 30
#     for CRD in $(kubectl get crd -n {{ fact_storage_namespace }} | awk '/ceph.rook.io/ {print $1}'); do kubectl get -n {{ fact_storage_namespace }} "$CRD" -o name | xargs -I {} kubectl patch -n {{ fact_storage_namespace }} {} --type merge -p '{"metadata":{"finalizers": []}}';done
#     kubectl delete -n argocd application storage --ignore-not-found 2>&1 &
#   args:
#     executable: /bin/bash
#   ignore_errors: true

# - name: Delete sc cluster before infra teardown
#   ansible.builtin.shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl delete cluster.cluster.x-k8s.io -n {{ fact_capi_cluster_namespace }} {{ fact_capi_cluster_name }} --ignore-not-found=true
#     sleep 60
#   args:
#     executable: /bin/bash
#   ignore_errors: true
