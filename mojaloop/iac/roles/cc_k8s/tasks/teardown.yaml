- name: Delete resources before infra teardown
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} root-deployer --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # for app in capi-post-config capi vault-post-config gitlab-pre netbird-pre zitadel-pre gitlab nexus monitoring vault; do
    #   kubectl patch application -n {{ fact_argo_merged_config.namespace }} $app --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # done

    # Delete apps
    # for app in gitlab nexus monitoring vault; do
    #   kubectl delete application -n {{ fact_argo_merged_config.namespace }} $app --ignore-not-found=true
    # done
    # kubectl delete pvc --all -n monitoring --grace-period=0 --force --ignore-not-found=true
    # kubectl delete pvc --all -n gitlab --grace-period=0 --force --ignore-not-found=true
    # kubectl delete pvc --all -n nexus --grace-period=0 --force --ignore-not-found=true
    # kubectl delete pvc --all -n vault --grace-period=0 --force --ignore-not-found=true

    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} root-deployer --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} capi-post-config --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} capi --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true

    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} vault-post-config --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} gitlab-pre --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} netbird-pre --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    # kubectl patch application -n {{ fact_argo_merged_config.namespace }} zitadel-pre --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true

    kubectl delete awsroute53record -n {{ fact_argo_merged_config.apps['gitlab'].sub_apps['gitlab'].namespace }} ceph-objectstore-rgw --ignore-not-found=true
    # kubectl delete workspaces.tf.upbound.io vault-{{ dynamic_secret_platform }}-post-config
    # kubectl delete workspaces.tf.upbound.io vault-post-config
    # kubectl delete rdsaurorareplicaclaims.infitx.org  -n {{ fact_argo_merged_config.apps['gitlab'].sub_apps['gitlab'].namespace }} --ignore-not-found=true --all
    # kubectl delete rdsauroradbclusterclaims.infitx.org  -n {{ fact_argo_merged_config.apps['gitlab'].sub_apps['gitlab'].namespace }} --ignore-not-found=true --all
    # kubectl delete rdsdbclusterclaims.infitx.org  -n {{ fact_argo_merged_config.apps['gitlab'].sub_apps['gitlab'].namespace }} --ignore-not-found=true --all

    # kubectl delete s3bucketclaims.infitx.org  -n {{ fact_argo_merged_config.apps['gitlab'].sub_apps['gitlab'].namespace }} --ignore-not-found=true --all

    # kubectl delete rdsaurorareplicaclaims.infitx.org -n {{ fact_argo_merged_config.apps['security'].sub_apps['zitadel'].namespace }} --ignore-not-found=true --all
    # kubectl delete rdsauroradbclusterclaims.infitx.org -n {{ fact_argo_merged_config.apps['security'].sub_apps['zitadel'].namespace }} --ignore-not-found=true --all
    # kubectl delete rdsdbclusterclaims.infitx.org -n {{ fact_argo_merged_config.apps['security'].sub_apps['zitadel'].namespace }} --ignore-not-found=true --all

    # kubectl delete rdsaurorareplicaclaims.infitx.org -n {{ fact_argo_merged_config.apps['security'].sub_apps['netbird'].namespace }} --ignore-not-found=true --all
    # kubectl delete rdsauroradbclusterclaims.infitx.org -n {{ fact_argo_merged_config.apps['security'].sub_apps['netbird'].namespace }} --ignore-not-found=true --all
    # kubectl delete rdsdbclusterclaims.infitx.org -n {{ fact_argo_merged_config.apps['security'].sub_apps['netbird'].namespace }} --ignore-not-found=true --all
    # sleep 600
  args:
    executable: /bin/bash
  ignore_errors: true

- name: Tear down ceph cluster on cc before sc cluster removal
  ansible.builtin.shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    kubectl patch application -n {{ fact_argo_merged_config.namespace }} {{ fact_storage_namespace }} --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    kubectl config set-context --current --namespace {{ fact_storage_namespace }}
    kubectl -n {{ fact_storage_namespace }} scale deployment rook-ceph-operator --replicas=0
    kubectl -n {{ fact_storage_namespace }} scale deployment csi-cephfsplugin-provisioner --replicas=0
    kubectl -n {{ fact_storage_namespace }} scale deployment csi-rbdplugin-provisioner --replicas=0
    for CRD in $(kubectl get crd -n {{ fact_storage_namespace }} | awk '/ceph.rook.io/ {print $1}'); do kubectl get -n {{ fact_storage_namespace }} "$CRD" -o name | xargs -I {} kubectl patch -n {{ fact_storage_namespace }} {} --type merge -p '{"metadata":{"finalizers": []}}';done
    kubectl delete cephcluster {{ fact_storage_namespace }} --ignore-not-found=true -n {{ fact_storage_namespace }}
    kubectl -n {{ fact_storage_namespace }} delete daemonset csi-cephfsplugin
    kubectl -n {{ fact_storage_namespace }} delete daemonset csi-rbdplugin
  args:
    executable: /bin/bash
  ignore_errors: true

- name: Delete sc cluster before infra teardown
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    kubectl delete cluster.cluster.x-k8s.io -n {{ fact_capi_cluster_namespace }} {{ fact_capi_cluster_name }} --ignore-not-found=true
    sleep 60
  args:
    executable: /bin/bash
  ignore_errors: true
# - name: Pause to finish resources deletion
#   ansible.builtin.pause:
#     seconds: 300
# - name: Wait for vault to be gone
#   shell: |
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl patch workspace netbird-pre-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl patch workspace zitadel-post-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl patch workspace zitadel-argocd-oidc-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl patch workspace zitadel-vault-oidc-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]'  || true
#     export zitadel_pvcs=$(kubectl get pvcs -n zitadel --no-headers -o custom-columns=":metadata.name") || true
#     for n in $zitadel_pvcs; do kubectl patch -n zitadel pvc $n --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' ; done || true
#     kubectl patch workspace vault-post-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig get application -n {{ fact_argo_merged_config.namespace }} vault
#   register: outputapp
#   until: outputapp is failed
#   retries: 100
#   delay: 30
#   ignore_errors: true

# - name: Sleep for 300 seconds and continue with play
#   ansible.builtin.wait_for:
#     timeout: 300