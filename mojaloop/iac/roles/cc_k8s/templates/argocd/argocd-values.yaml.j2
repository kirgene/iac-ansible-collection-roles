global:
  domain: argocd.{{ fact_argo_merged_config.apps['dns_utils'].sub_apps['cr_config'].dns_private_subdomain }}
  logging:
    format: json
configs:
  cm:
    url: http://argocd.{{ fact_argo_merged_config.apps['dns_utils'].sub_apps['cr_config'].dns_private_subdomain }}
    exec.enabled: "true"
    kustomize.buildOptions: "--enable-helm --helm-kube-version 1.29-0 --load-restrictor LoadRestrictionsNone"
    application.resourceTrackingMethod: annotation

    # DO NOT USE in production, this is only used to improve reconciliation in testing env.
    timeout.reconciliation: "10s"
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
            if obj.status ~= nil then
            local status = obj.status
            if status.conditions ~= nil then
              for i, condition in ipairs(status.conditions) do
                if condition.type ~= nil and string.match(condition.type, '.*Error$') then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
              end
            end
            if status.health ~= nil then
              local health = status.health
              hs.status = health.status
              if health.message ~= nil then
                hs.message = health.message
              end
              local syncStatus = (status.sync and status.sync.status or nil)
              if hs.status == "Healthy" and syncStatus ~= "Synced" then
                hs.status = "Progressing"
              end
            end
          end
          return hs
      cert-manager.io/Certificate:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Ready" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Ready" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end

          hs.status = "Progressing"
          hs.message = "Waiting for certificate"
          return hs
      redhatcop.redhat.io/VaultSecret:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "ReconcileSuccessful" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "ReconcileSuccessful" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end

          hs.status = "Progressing"
          hs.message = "Waiting for VaultSecret"
          return hs

      ceph.rook.io/CephBlockPool:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.phase == "Ready" then
              hs.status = "Healthy"
              hs.message = "CephBlockPool Ready"
              return hs
            end
          end
          hs.status = "Progressing"
          hs.message = "Waiting for CephBlockPool"
          return hs
    # dex.config: |
    #   connectors:
    #     - id: google
    #       name: Google
    #       type: oidc
    #       config:
    #         issuer: https://accounts.google.com
    #         clientID: $dex.client.id # read from argo-secrets
    #         clientSecret: $dex.client.secret # read from argo-secrets
    # extension.config: |-
    #   extensions:
    #     - name: metrics
    #       backend:
    #         services:
    #         - url: http://argocd-metrics-server.argocd.svc.cluster.local:9003

  params:
    server.insecure: true
    # Mandatory for extensions to work
    server.enable.proxy.extension: "true"
  rbac:
    policy.default: role:readonly
    policy.csv: |-
      p, role:readonly, extensions, invoke, metrics, allow
      p, role:admin, extensions, invoke, metrics, allow
  cmp:
    create: true
    plugins:
      envsubstappofapp:
        init:
          command: ["sh", "-c"]
          args:
            [
              "kustomize build . --load-restrictor LoadRestrictionsNone -o raw-kustomization.yaml",
            ]
        generate:
          command: ["sh", "-c"]
          args:
            [
              "envsubst < raw-kustomization.yaml > processed-kustomization.yaml && cp processed-kustomization.yaml /dev/stdout",
            ]
        discover:
          fileName: "kustomization.*"
      envsubst:
        discover:
          fileName: "kustomization.*"
        generate:
          command: ["sh", "-c"]
          args:
            [
              "for f in *.yaml ; do cat $f | envsubst > $f.sub && mv $f.sub $f ; done && kustomize build . --enable-helm --helm-kube-version 1.29-0 --load-restrictor LoadRestrictionsNone > /dev/stdout",
            ]

      helmfile:
        init:
          command: [sh]
          args: [-c, "in-pod-kubeconfig.sh"]

        discover:
          fileName: "helmfile.yaml"
        generate:
          command: ["sh", "-c"]
          args:
            [
              "for f in *.yaml ; do cat $f | envsubst > $f.sub && mv $f.sub $f ; done && helmfile template --quiet -f helmfile.yaml > /dev/stdout",
            ]

repoServer:
  # resources:
  #   limits:
  #     cpu: 500m
  #     memory: 1.5Gi
  #   requests:
  #     cpu: 250m
  #     memory: 512Mi
  env:
    - name: HELM_CACHE_HOME
      value: /helm-working-dir
    - name: HELM_CONFIG_HOME
      value: /helm-working-dir
    - name: HELM_DATA_HOME
      value: /helm-working-dir

  volumes:
    - name: custom-tools
      emptyDir: {}
    - name: cmp-plugin
      configMap:
        name: argocd-cmp-cm

  initContainers:
    - name: helm-plugins
      image: alpine/helm:{{ helm_version }}
      volumeMounts:
        - name: helm-working-dir
          mountPath: /helm-working-dir
      env:
        - name: HELM_CACHE_HOME
          value: /helm-working-dir
        - name: HELM_CONFIG_HOME
          value: /helm-working-dir
        - name: HELM_DATA_HOME
          value: /helm-working-dir
      command: ["/bin/sh", "-c"]
      args:
        - helm plugin install https://github.com/databus23/helm-diff --version 3.9.8 && rm -rf /helm-working-dir/plugins/https* && helm plugin install https://github.com/aslafy-z/helm-git --version 0.16.0 && rm -rf /helm-working-dir/plugins/https* && chmod -R 777 $HELM_DATA_HOME

    - name: download-tools
      image: golang:1.22.4-alpine3.20
      command: [sh, -c]
      args:
        - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/ && wget -qO- https://github.com/helmfile/helmfile/releases/download/v{{ helmfile_version }}/helmfile_{{ helmfile_version }}_linux_amd64.tar.gz | tar xvz helmfile && mv helmfile /custom-tools/ && wget https://gist.githubusercontent.com/enriched/11c7d81aa271b258f835620b1aca2e55/raw/2017a4202da30506b1fedc2981afed41e259fe77/in-pod-kubeconfig.sh && chmod +x in-pod-kubeconfig.sh && mv in-pod-kubeconfig.sh /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools

  extraContainers:
    - name: debug-tools
      image: quay.io/argoproj/argocd
      command: [sh, -c]
      args:
        - while true; do echo "running"; sleep 300; done
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst
        - name: custom-tools
          subPath: helmfile
          mountPath: /usr/local/bin/helmfile
        - name: custom-tools
          subPath: in-pod-kubeconfig.sh
          mountPath: /usr/local/bin/in-pod-kubeconfig.sh
        - name: helm-working-dir
          mountPath: /helm-working-dir

    - name: envsubstappofapp
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd
      args: [--loglevel, debug]
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: envsubstappofapp.yaml
          name: cmp-plugin

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst

    - name: envsubst
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd
      args: [--loglevel, debug]
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: envsubst.yaml
          name: cmp-plugin

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst

    - name: helmfile
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd
      args: [--loglevel, debug]
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      env:
        - name: HELM_CACHE_HOME
          value: /helm-working-dir
        - name: HELM_CONFIG_HOME
          value: /helm-working-dir
        - name: HELM_DATA_HOME
          value: /helm-working-dir
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: helmfile.yaml
          name: cmp-plugin

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: helmfile
          mountPath: /usr/local/bin/helmfile

        - name: custom-tools
          subPath: in-pod-kubeconfig.sh
          mountPath: /usr/local/bin/in-pod-kubeconfig.sh

        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst

        - name: helm-working-dir
          mountPath: /helm-working-dir
